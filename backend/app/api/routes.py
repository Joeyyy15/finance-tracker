from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session

# importing database session and models/schemas
from app.db.db_setup import SessionLocal
from app.models.transaction import Transaction
from app.schemas.transaction import TransactionCreate, TransactionOut

router = APIRouter()

# gets a database session for each request
def get_db():
    db = SessionLocal()
    try:
        yield db # gives back the database session to the route
    finally:
        db.close() # makes sure the DB session is always closed

# POST route to create a new transaction
@router.post("/transactions", response_model=TransactionOut)
def create_transaction(
    transaction: TransactionCreate, #incoming request body
    db: Session = Depends(get_db)   #get the database session
):  
    # creates a new transaction model instance
    new_transaction = Transaction(
        amount = transaction.amount,
        category=transaction.category
    )

    # Add it to the database
    db.add(new_transaction)
    db.commit()                  #save the changes
    db.refresh(new_transaction)  #reload to get the new autogenerated ID and date

    # Return the newly created transaction (coverted using schema)
    return new_transaction

# GET route to return all transactions from the database
@router.get("/transactions", response_model=list[TransactionOut])
def get_transactions(db: Session = Depends(get_db)):
    # Query the database to get all transaction rows
    transactions = db.query(Transaction).all()

    # Return the full list of transactions
    return transactions

